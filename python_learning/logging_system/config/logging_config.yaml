version: 1
disable_existing_loggers: true

formatters:
  standard:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  precise:
    format: "%(levelname)s %(asctime)s <PID %(process)d:%(processName)s> %(name)s.%(funcName)s(): %(message)s (%(filename)s:%(lineno)d)"
  error:
    format: "%(levelname)s <PID %(process)d:%(processName)s> %(name)s.%(funcName)s(): %(message)s"

filters:
  sensitive_filter:
    # '()' 用于指定用于实例化对象的可调用名称。需要使用自定义过滤器类的全名，包括其包和模块名。
    (): python_learning.logging_system.logging_filters.keyword_filters.SensitiveFilter
  warning_filter:
    (): python_learning.logging_system.logging_filters.keyword_filters.WarningFilter

handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: standard
    stream: ext://sys.stdout

  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: standard
    filename: ./tmp/info.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  warn_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: WARN
    formatter: standard
    filename: ./tmp/warn.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  error_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: error
    filename: ./tmp/errors.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  critical_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: CRITICAL
    formatter: precise
    filename: ./tmp/critical.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8
    filters: [ sensitive_filter ]

  debug_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: standard
    filename: ./tmp/debug.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

# root 也是一个 logger
root:
  level: NOTSET
  handlers: [ console, info_file_handler, warn_file_handler, error_file_handler, critical_file_handler, debug_file_handler, ]
  propagate: yes

# logger 是日志记录程序的入口，在使用 logger 前，你需要通过 getLogger 获取一个 logger
loggers:
  base_logger:
    level: INFO
    handlers: [ console, info_file_handler, warn_file_handler ]
    propagate: no
    # 父级记录器的过滤器不会作用于子级记录器
    filters: [ sensitive_filter ]

  # 继承关系通过点号（.）号描述
  base_logger.child:
    level: DEBUG
    handlers: [ console, info_file_handler ]
    # 如果日志记录器被设置为可传播，则日志记录会往上冒泡，每个记录器都会将符合的日志交给其处理器处理。
    # 在这个记录器中，如果一条日志为 warn 级别，它会在控制台和 info 日志文件中出现两次，因为会被传播到父级记录器 base_logger。
    # 但在 warn 日志文件中只会出现一次，因为此记录器没有相关执行写入 warn 文件的 handler。
    propagate: yes
    filters: [ warning_filter ]
